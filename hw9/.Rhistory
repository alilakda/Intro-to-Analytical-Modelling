i = i + 1
}
}
View(newdata)
i = 1
for (y in seq(1:length(data[, 1]))) {
if (data[y, 7] != "?") {
newdata[i, ] = data[y, ]
i = i + 1
}
}
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[i, ] = data1[y, ]
i = i + 1
}
}
View(newdata)
print(i)
newdata = newdata[complete.cases(newdata), ]
new data
newdata
mode_data <- get_mode(data1["V7"])
mode_data <- getmode(data1["V7"])
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_data <- getmode(data1["V7"])
mode_data
mode_data <- getmode(data1[,7])
mode_data
i = i
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[i, ] = data1[y, ]
i = i
}
}
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[y, ] = mode_data
i = i + 1
}
}
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[i,7 ] = mode_data
i = i + 1
}
}
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[y,7 ] = mode_data
i = i + 1
}
}
rm(list = ls())
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data1 = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1
newdata <- data.frame(matrix( nrow = 699, ncol = 11))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_data <- getmode(data1[,7])
mode_data
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[y,7 ] = mode_data
i = i + 1
}
}
rm(list = ls())
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data1 = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1
newdata <- data.frame(matrix( nrow = 699, ncol = 11))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_data <- getmode(data1[,7])
mode_data
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[y,7 ] = mode_data
i = i + 1
}
}
rm(list = ls())
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data1 = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1
newdata <- data.frame(matrix( nrow = 699, ncol = 11))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_data <- getmode(data1[,7])
mode_data
i = 1
for (y in seq(1:length(data1[, 1]))) {
if (data1[y, 7] != "?") {
newdata[y,7 ] = mode_data
i = i + 1
}
}
install.packages("imputeMissings")
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
for (row in data1){
if(data1 == "?"){
data1 = NA
}
}
for (row in 1:nrow(data1)){
for(item in row){
if (item == "?"){
item = NA
}
}
}
data1
#locate the NA's
is.na(data1)
colSums(is.na(data1))
for (row in 1:nrow(data1)){
for(item in row){
if (item == "?"){
item = NA
}
}
}
data1
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
for (row in 1:nrow(data1)){
for(item in row){
if (item == "?"){
item = na
}
}
}
data1
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
data1[data1 == "?"] <- NA
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
mean(data1[,7])
# We have 16 NA's we can use similar methodology for mode and mean
data1[is.na(data1[,7])]
# We have 16 NA's we can use similar methodology for mode and mean
data1[is.na(data1[,7]),7]
# We have 16 NA's we can use similar methodology for mode and mean
data1[-is.na(data1[,7]),7]
rm(list = ls())
rm(list = ls())
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data1 = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1
data1[data1 == "?"] <- NA
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
# We have 16 NA's we can use similar methodology for mode and mean
# data1[-is.na(data1[,7]),7]
# mean(data1[,7])
View(data1)
View(data1)
data1[data1 == "?"] <- NA
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
print(data1)
data2 <- data1[data1 == "?"] <- NA
data1[data1 == "?"] <- NA
data1[data1 == "?"] <- NA
data1
data2 <- na.omit(data1)
View(data2)
# We have 16 NA's we can use similar methodology for mode and mean
data2[-is.na(data2[,7]),7]
mean(data2[,7])
rm(list = ls())
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data1 = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1[data1 == "?"] <- NA
data2 <- na.omit(data1)
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
# We have 16 NA's we can use similar methodology for mode and mean
mean(data2[,7])
data2
data2[,7]
data1 <- data.copy()
rm(list = ls())
library(data.table)
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1 <- copy(data)
data1[data1 == "?"] <- NA
data2 <- na.omit(data1)
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
data2[,7]
# We have 16 NA's we can use similar methodology for mode and mean
mean(data2[,7])
# We have 16 NA's we can use similar methodology for mode and mean
mean(as.numeric(data2[,7]))
library(imputeMissings)
impute(data1, object=meandata)
meandata = mean(as.numeric(data2[,7]))
library(imputeMissings)
impute(data1, object=meandata)
rm(list = ls())
library(data.table)
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1 <- copy(data)
data1[data1 == "?"] <- NA
data2 <- na.omit(data1)
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
data2[,7]
# We have 16 NA's we can use similar methodology for mode and mean
meandata = mean(as.numeric(data2[,7]))
data1[is.na(data1)] <- meandata
data1
data1[,7]
data1[data1 == NA] <- meandata
data1[,7]
data1[data1 == "<NA>"] <- meandata
data1[,7]
data1[data1 == NA] <- meandata
data1[,7]
data2 <- copy(data)
data2[data1 == "?"] <- meandata
data2
View(data2)
data3 <- copy(data)
data3[data3 == "?"] <- meandata
sapply(data1[, 7], as.numeric)
data1[,7] <- sapply(data1[, 7], as.numeric)
data1
data1[,7]
data1[data1 == NA] <- meandata
data1[,7]
data1[is.na(data1)] <- meandata
data1[,7]
== NA
rm(list = ls())
library(data.table)
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1 <- copy(data)
data1[data1 == "?"] <- NA
data2 <- na.omit(data1)
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
data2[,7]
# We have 16 NA's we can use similar methodology for mode and mean
meandata = mean(as.numeric(data2[,7]))
data1[,7] <- sapply(data1[, 7], as.numeric)
data1[,7]
data1[data1 == NA] <- meandata
data1[,7]
data1[data1 == NA,7] <- meandata
data1[data1[, 7] == NA, 7] <- meandata
data1[is.na(data1[, 7]), 7] <- meandata
data1[,7]
data1[,7]
mode <- getmode(data3[,7])
data3[is.na(data3[, 7]), 7] <- mode
data3[,7]
data3 <- copy(data)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode <- getmode(data3[,7])
data3[is.na(data3[, 7]), 7] <- mode
data3[,7]
mode <- getmode(data3[,7])
data3[data3 == "?"] <- NA
data3[,7] <- sapply(data3[, 7], as.numeric)
data3[is.na(data3[, 7]), 7] <- mode
data3[,7]
install.packages("mice")
library(mice)
data4 <- copy(data)
data4[data4 == "?"] <- NA
data4[,7] <- sapply(data4[, 7], as.numeric)
# Deterministic regression imputation via mice
imp <- mice(data4, method = "norm.predict", m = 1)
# Store data
data_imp <- complete(imp)
data_imp
colSums(is.na(data_imp))
data5 <- copy(data)
data5[data5 == "?"] <- NA
data5[,7] <- sapply(data5[, 7], as.numeric)
# Deterministic regression imputation via mice with pertubation
imp1 <- mice(data5, method = "norm.nob", m = 1)
# Store data
data_imp1 <- complete(imp1)
data_imp1
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V11~.,data1,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data)] + 0.5) # round off to 0 or 1
accuracy[k] <- sum(predicted == data$V11)
}
# show accuracies
accuracy
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V7~.,data1,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data1)] + 0.5) # round off to 0 or 1
accuracy[k] <- sum(predicted == data$V17)
}
# show accuracies
accuracy
library(kknn)
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V7~.,data1,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data1)] + 0.5) # round off to 0 or 1
accuracy[k] <- sum(predicted == data$V17)
}
# show accuracies
accuracy
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data1)] + 0.5) # round off to 0 or 1
accuracy[k] <- sum(predicted == data$V7)
}
# show accuracies
accuracy
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V11~.,data1,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data1)] + 0.5) # round off to 0 or 1
accuracy[k] <- sum(predicted == data$V11)
}
# show accuracies
accuracy
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V11~.,data,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data)] + 0.5) # round off to 0 or 1
accuracy[k] <- mean(predicted == data$V11)
}
# show accuracies
accuracy
function(data1)
knn_process(data1)
library(kknn)
knn_process <- function(data1){
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V11~.,data1,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data1)] + 0.5) # round off to 0 or 1
accuracy[k] <- sum(predicted == data$V11)
}
# show accuracies
print(accuracy)
}
knn_process(data1)
knn_process <- function(data1){
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V11~.,data1,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data1)] + 0.5) # round off to 0 or 1
accuracy[k] <- mean(predicted == data$V11)
}
# show accuracies
print(accuracy)
}
knn_process(data1)
knn_process(data1)
knn_process(data2)
knn_process(data3)
knn_process(data4)
knn_process(data5)
rm(list = ls())
library(data.table)
setwd("Google Drive/isye6501modelling/isye6501homeworks/hw9")
data = read.table("breast-cancer-wisconsin.data.txt",sep = ",", header = FALSE)
data1 <- copy(data)
data1[data1 == "?"] <- NA
data2 <- na.omit(data1)
#locate the NA's
is.na(data1)
#how many missings per variable?
colSums(is.na(data1))
data2[,7]
# We have 16 NA's we can use similar methodology for mode and mean
meandata = mean(as.numeric(data2[,7]))
data1[,7] <- sapply(data1[, 7], as.numeric)
data1[,7]
data1[is.na(data1[, 7]), 7] <- meandata
data3 <- copy(data)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode <- getmode(data3[,7])
data3[data3 == "?"] <- NA
data3[,7] <- sapply(data3[, 7], as.numeric)
data3[is.na(data3[, 7]), 7] <- mode
data3[,7]
library(mice)
data4 <- copy(data)
data4[data4 == "?"] <- NA
data4[,7] <- sapply(data4[, 7], as.numeric)
# Deterministic regression imputation via mice
imp <- mice(data4, method = "norm.predict", m = 1)
# Store data
data_imp <- complete(imp)
data_imp
data5 <- copy(data)
data5[data5 == "?"] <- NA
data5[,7] <- sapply(data5[, 7], as.numeric)
# Deterministic regression imputation via mice with pertubation
imp1 <- mice(data5, method = "norm.nob", m = 1)
# Store data
data_imp1 <- complete(imp1)
data_imp1
library(kknn)
knn_process <- function(data1){
kmax <- 30
# use train.kknn for leave-one-out cross-validation up to k=kmax
model <- train.kknn(V11~.,data1,kmax=kmax,scale=TRUE)
# create array of prediction qualities
accuracy <- rep(0,kmax)
# calculate prediction qualities
for (k in 1:kmax) {
predicted <- as.integer(fitted(model)[[k]][1:nrow(data1)] + 0.5) # round off to 0 or 1
accuracy[k] <- mean(predicted == data$V11)
}
# show accuracies
print(accuracy)
}
knn_process(data1)
knn_process(data2)
knn_process(data3)
knn_process(data4)
knn_process(data5)
colSums(is.na(data4))
knn_process(data1)
knn_process(data2)
knn_process(data3)
knn_process(data_imp)
knn_process(data_imp1)
install.packages("FrF2")
#check
#data1[,7] <- commented out for readability of PDF
data1[,7]
data_imp[,7]
