uscrime <- read.delim("~/Google Drive/isye6501modelling/isye6501homeworks/hw8/uscrime.txt")
View(uscrime)
knitr::opts_chunk$set(echo = TRUE)
crimedata = uscrime
library(MASS)
#Original Linear Model with all variables
model <- lm(Crime -., data = crimedata)
#Original Linear Model with all variables
model <- lm(Crime ~., data = crimedata)
step_model <- step(model, direction = "both", trace = TRUE)
summary(step_model)
#Original Linear Model with all variables
model <- lm(Crime ~., data = crimedata)
#Original Linear Model with all variables
model <- lm(Crime ~., data = crimedata)
summary(model)
#Model with only significant variables
model2 <- lm(Crime ~ Ed + Ineq + M, Po2 + Prob + U2, data = crimedata )
summary(model2)
summary(model2)
#Model with only significant variables
model2 <- lm(Crime ~ Ed + Ineq + M +Po2 + Prob + U2, data = crimedata )
summary(model2)
step_model2 <- step(model, direction = "both", trace = TRUE)
summary(step_model2)
scaleData = scale(crimedata, center = TRUE, scale = TRUE)
scaleData <- scale(crimedata, center = TRUE, scale = TRUE)
print(scaleData)
x <- scaleData[,-16]
y <- scaleData[,16]
trn <- sample(1:n, size = round(n*0.7), replace = FALSE)
nrow
trn <- sample(1:n, size = round(n*0.7), replace = FALSE)
trn <- sample(1:m, size = round(n*0.7), replace = FALSE)
m <- nrow(x)
trn <- sample(1:m, size = round(n*0.7), replace = FALSE)
trn <- sample(1:m, size = round(m*0.7), replace = FALSE)
m <- nrow(x)
trn <- sample(1:m, size = round(m*0.7), replace = FALSE)
train <- x[trn,]
testx <- x[-trn,]
m <- nrow(x)
trn <- sample(1:m, size = round(m*0.7), replace = FALSE)
trainx <- x[trn,]
testx <- x[-trn,]
trainy <- y[trn,]
x <- scaleData[,-16]
y <- scaleData[,16]
m <- nrow(x)
trn <- sample(1:m, size = round(m*0.7), replace = FALSE)
trainx <- x[trn,]
testx <- x[-trn,]
trainy <- y[trn,]
m <- nrow(x)
trn <- sample(1:m, size = round(m*0.7), replace = FALSE)
trainx <- x[trn,]
testx <- x[-trn,]
trainy <- y[trn]
testy <- y[-trn]
fit.lasso <- glmnet(trainx, train_y, family = "gaussian", alpha = -1)
library(glmnet)
set.seed(1234)
scaleData <- scale(crimedata, center = TRUE, scale = TRUE)
x <- scaleData[,-16]
y <- scaleData[,16]
m <- nrow(x)
trn <- sample(1:m, size = round(m*0.7), replace = FALSE)
trainx <- x[trn,]
testx <- x[-trn,]
trainy <- y[trn]
testy <- y[-trn]
fit.lasso <- glmnet(trainx, train_y, family = "gaussian", alpha = -1)
train_y <- y[trn]
test_y <- y[-trn]
fit.lasso <- glmnet(trainx, train_y, family = "gaussian", alpha = -1)
fit.elnet <- glmnet(trainx, train_y, family = "gaussian", alpha = 0.5)
fit.lasso <- glmnet(trainx, train_y, family = "gaussian", alpha = 1)
fit.elnet <- glmnet(trainx, train_y, family = "gaussian", alpha = 0.5)
for (i in 0:10){
assign(paste("fit", i, sep = ""), cv.glmnet(trainx, train_y, type.measure="mse",alpha-i/10, family="gaussian"))
}
for (i in 0:10){
assign(paste("fit", i, sep = ""), cv.glmnet(trainx, train_y, type.measure="mse",alpha=i/10, family="gaussian"))
}
for (i in 0:10){
assign(paste("fit", i, sep = ""), cv.glmnet(trainx, train_y,alpha=i/10, family="gaussian"))
}
rsq(fit0)
install.packages("rsq")
library("rsq", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
rsq(fit0)
rsq(fit0)
for (i in 0:10){
assign(paste("fit", i, sep = ""), cv.glmnet(trainx, train_y,alpha=i/10,model = TRUE, family="gaussian"))
}
for (i in 0:10){
assign(paste("fit", i, sep = ""), cv.glmnet(trainx,model = TRUE, train_y,alpha=i/10, family="gaussian"))
}
for (i in 0:10){
assign(paste("fit", i, sep = ""), cv.glmnet(trainx, train_y,alpha=i/10, family="gaussian"))
}
rsq(fit0)
rsq(fit.lasso)
fit.lasso <- glmnet(trainx, train_y, family = "gaussian", alpha = 1, model = TRUE)
SStot <- sum((scaleData$Crime - mean(scaleData$Crime))^2)
crimedata = read.table('uscrime.txt')
crimedata
print(crimedata)
crimedata = read.table('uscrime.txt')
View(crimedata)
crimedata = read.table('uscrime.txt', header = TRUE)
print(crimedata)
View(crimedata)
scaleData <- scale(crimedata, center = TRUE, scale = TRUE)
SStot <- sum((scaleData$Crime - mean(scaleData$Crime))^2)
SStot <- sum((y - mean(y))^2)
totsse <- 0
R2 <- c()
for (i in 0:10) {
# alpha=i/10,family="gaussian"))
elasticfit <- cv.glmnet(trainx, train_y, type.measure="mse",
alpha=i/10,family="gaussian")
R2 = cbind(R2, elasticfit$glmnet.fit$dev.ratio[which(elasticfit$glmnet.fit$lambda == elasticfit$lambda.min)])
}
R2
alphas <- [0:10]
alphas <- (0:10)
alphas
alphas <- (0:10)/10
alphas
plot(alphas, R2)
plot(alphas, R2, line = TRUE)
plot(alphas, R2)
line
line(alphas, R@)
line(alphas, R2)
lines(alphas, R2)
plot(alphas, R2)
lines(alphas, R2)
model <- lm(Crime ~., data = crimedata)
summary(model)
#Model with only significant variables
model2 <- lm(Crime ~ Ed + Ineq + M +Po2 + Prob + U2, data = crimedata )
summary(model2)
#Stepwise with all
step_model <- step(model, direction = "both", trace = TRUE)
summary(step_model)
#Stepwise with only significant
step_model2 <- step(model, direction = "both", trace = TRUE)
summary(step_model2)
summary(model)
summary(model2)
summary(step_model)
step_model2 <- step(model, direction = "both", trace = TRUE)
summary(step_model2)
step_model2 <- step(model2, direction = "both", trace = TRUE)
summary(step_model2)
R2
lines(alphas, R2)
plot(alphas, R2)
lines(alphas, R2)
R2
plot(alphas, R2)
lines(alphas, R2)
